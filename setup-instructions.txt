# King Chu Bridge - Online Setup Instructions

## üöÄ Quick Start (Basic Connectivity Test)

### Step 1: Install Node.js Dependencies
```bash
# Create a new folder for your game
mkdir king-chu-online
cd king-chu-online

# Install WebSocket library
npm install ws

# Download the files:
# - server.js (from artifact)
# - client.html (from artifact)
# - game-components.js (for later integration)
```

### Step 2: Find Your IP Address
```bash
# Windows
ipconfig

# Mac/Linux  
ifconfig
```
Look for your IPv4 address (usually starts with 192.168.x.x)

### Step 3: Start the Server
```bash
node server.js
```

You should see:
```
üöÄ King Chu Bridge Server Starting...
üì° Server will run on: http://localhost:3000
üåê Other players can join via: http://[YOUR_IP]:3000
üéÆ Ready for players!
```

### Step 4: Test Connectivity
1. **Host (You)**: Open `http://localhost:3000`
2. **Other Players**: Open `http://[YOUR_IP]:3000` (replace with your actual IP)
3. **All Players**: Enter names and join
4. **Host**: Click "Start Game" when 4 players joined

## üîß Integration Phases

### Phase 1: ‚úÖ Basic Connectivity (DONE)
- [x] Players can join (max 4)
- [x] Host can start game  
- [x] Chat system works
- [x] Disconnect handling

### Phase 2: Add Card System
**Server Changes (server.js):**
```javascript
// 1. Add at top of file:
const { GAME_RULES, CARD_SYSTEM, TRICK_SYSTEM } = require('./game-components.js');

// 2. Replace gameState object with:
let gameState = {
    players: [],
    gameStarted: false,
    hostId: null,
    phase: 'waiting',
    // NEW GAME VARIABLES:
    round: 1,
    currentPlayer: 0,
    biddingStartPlayer: 0,
    trump: null,
    dynamicTrump: null,
    currentTrick: [],
    leadSuit: null,
    playerHands: {},
    scores: {},
    bids: {},
    tricksWon: {},
    trickHistory: []
};

// 3. Find "TODO: INSERT GAME_INITIALIZATION HERE" and replace with:
initializeGameRules();
dealFirstRound();

// 4. Find "TODO: INSERT GAME_LOGIC_FUNCTIONS HERE" and add:
[Copy the SERVER_GAME_LOGIC functions from game-components.js]
```

**Client Changes (client.html):**
```javascript
// 1. Find "TODO: INSERT GAME_VARIABLES HERE" and add:
let myHand = [];
let currentPhase = 'waiting';

// 2. Find "TODO: INSERT GAME_CONTENT_HTML HERE" and add:
[Copy the HTML elements from CLIENT_GAME_UI]

// 3. Find "TODO: INSERT GAME_UI_STYLES HERE" and add:
[Copy the CSS styles from CLIENT_GAME_UI]

// 4. Find "TODO: INSERT GAME_FUNCTIONS HERE" and add:
[Copy the JavaScript functions from CLIENT_GAME_UI]
```

### Phase 3: Add Bidding System
```javascript
// Server: Add message handler
case 'bid':
    handleBid(ws, data);
    break;

// Client: Add bid buttons and logic
// (Already included in Phase 2 CLIENT_GAME_UI)
```

### Phase 4: Add Card Playing
```javascript
// Server: Add message handler  
case 'play_card':
    handlePlayCard(ws, data);
    break;

// Client: Add card click handlers
// (Already included in Phase 2 CLIENT_GAME_UI)
```

### Phase 5: Add Scoring & Rounds
```javascript
// Server: Add round completion logic
// (Already included in SERVER_GAME_LOGIC)

// Client: Add score display
// (Already included in CLIENT_GAME_UI)
```

### Phase 6: Add Advanced Features
- Original game animations
- Sound effects  
- Enhanced UI styling
- Trump suit highlighting
- Card sorting options
- Game statistics

## üåê Network Setup

### For Local Network Play:
1. **Windows Firewall**: Allow Node.js through firewall
   - Control Panel ‚Üí System and Security ‚Üí Windows Defender Firewall
   - Click "Allow an app through firewall"
   - Add Node.js

2. **Router Settings**: Usually no changes needed for local network

### For Internet Play:
1. **Port Forwarding**: Forward port 3000 to your computer
2. **Dynamic DNS**: Use service like No-IP for stable address
3. **Firewall**: Allow port 3000 through router firewall

## üêõ Troubleshooting

### Connection Issues:
```bash
# Test if server is running
curl http://localhost:3000

# Check what's using port 3000
netstat -an | grep 3000

# Use different port
# In server.js, change: const PORT = 3000; 
# to: const PORT = 8080;
```

### Player Can't Join:
- Check IP address is correct
- Ensure Windows Firewall allows Node.js
- Try `http://localhost:3000` first to test locally
- Check antivirus isn't blocking connections

### Game Doesn't Start:
- Need exactly 4 players
- Only host can start game
- Check browser console for errors (F12)

## üìÅ File Structure
```
king-chu-online/
‚îú‚îÄ‚îÄ server.js              # Game server
‚îú‚îÄ‚îÄ client.html            # Web client
‚îú‚îÄ‚îÄ game-components.js     # Extracted game logic
‚îú‚îÄ‚îÄ package.json           # Node.js dependencies
‚îî‚îÄ‚îÄ node_modules/          # Installed packages
```

## üîÑ Making It Reusable

### Save as Template:
1. Create GitHub repository
2. Add all files
3. Document any customizations
4. Share repository link

### Configuration Options:
```javascript
// In server.js, make these configurable:
const CONFIG = {
    PORT: process.env.PORT || 3000,
    MAX_PLAYERS: 4,
    GAME_NAME: 'King Chu Bridge',
    ENABLE_SPECTATORS: false,
    AUTO_START: false
};
```

### Environment Variables:
```bash
# Create .env file:
PORT=3000
GAME_NAME="King Chu Bridge"
MAX_PLAYERS=4
```

## üéÆ Ready to Play!

1. **Test basic connectivity first** - make sure 4 players can join
2. **Add game components gradually** - one phase at a time  
3. **Test each phase thoroughly** before moving to next
4. **Keep original game backup** - in case you need to reference it

The system is designed to be modular and reusable. Once working, you can easily adapt it for other card games by swapping out the game rules and UI components.

## üìû Support
- Check browser console (F12) for error messages
- Server console shows connection logs
- All TODO comments marked in code for integration points
- Game components are cleanly separated for easy debugging